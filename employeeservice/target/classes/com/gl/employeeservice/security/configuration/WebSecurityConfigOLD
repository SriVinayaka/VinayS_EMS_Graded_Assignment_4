/**
 * 
 */
package com.gl.employeeservice.security.configuration;

/**
 * 
 */


import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

import com.gl.employeeservice.service.UserDetailsImplementation;






@Configuration
public class WebSecurityConfigOLD extends WebSecurityConfiguration{

	 @Bean
	    public UserDetailsService userDetailsService() {
	        return new UserDetailsImplementation();
	    }
	     
//	 @Bean
//	    public HttpSessionStrategy httpSessionStrategy() {
//	        return new HeaderHttpSessionStrategy();
//	    }
	 
	    @Bean
	    public BCryptPasswordEncoder passwordEncoder() {
	        return new BCryptPasswordEncoder();
	    }
	   
	    
	    @Bean
	    public AuthenticationManager authenticationManagerBean() throws Exception {
	        return super.authenticationManagerBean();
	    }
	    
	    
	    ///////////////////////////////////
	    
	    
	    @Bean
	    public AuthenticationManager authenticationManagerBean(UserDetailsService userDetailsService, PasswordEncoder passwordEncoder) throws Exception {
	      return new AuthenticationManagerBuilder()
	          .userDetailsService(userDetailsService)
	          .passwordEncoder(passwordEncoder)
	          .build();
	    
	    }
	    
	    
	    ////////////////////////////////////
	    
	    
	    
	    
	 
	    @Override
	    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
	        auth.userDetailsService(userDetailsService()).passwordEncoder(passwordEncoder());
	    }
	 
	    @Override
	    protected void configure(HttpSecurity http) throws Exception {
	        http.authorizeRequests()
	        	.antMatchers("/h2-console/").permitAll()
	        	.antMatchers("/api/user","/api/role").hasAuthority("ADMIN")
	            .antMatchers(HttpMethod.POST,"/api/employees").hasAuthority("ADMIN")
	            .antMatchers(HttpMethod.PUT,"/api/employees").hasAuthority("ADMIN")
	            .antMatchers(HttpMethod.DELETE,"/api/employees/*").hasAuthority("ADMIN")
	            //.antMatchers("/api/e","/student/delete").hasAuthority("ADMIN")
	            .anyRequest().authenticated()
	            .and().httpBasic()
//	            .formLogin().loginProcessingUrl("/login").successForwardUrl("/student/list").permitAll()
//	            .and()
//	            .logout().logoutSuccessUrl("/login").permitAll()
//	            .and()
//	            .exceptionHandling().accessDeniedPage("/student/403")
	            .and()
	            .cors().and().csrf().disable();
	    }
	    
	   

}

